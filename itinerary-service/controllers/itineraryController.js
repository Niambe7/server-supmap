// itinerary-service/controllers/itineraryController.js

const { Client } = require('@googlemaps/google-maps-services-js');
const polyline = require('@mapbox/polyline');
const Itinerary = require('../models/Itinerary');
const client = new Client({});

// ‚ñ∂Ô∏è Cr√©er un itin√©raire, en tenant compte du choix d'√©viter les p√©ages
const searchItinerary = async (req, res) => {
  // Extraction des param√®tres depuis le body
  const { start_location, end_location, user_id, avoidTolls } = req.body;

  // Validation des champs obligatoires
  if (!start_location || !end_location || !user_id) {
    return res.status(400).json({
      error: 'Les champs start_location, end_location et user_id sont requis.'
    });
  }

  try {
    // Pr√©paration des param√®tres pour l'API Google Maps Directions
    const params = {
      origin: start_location,
      destination: end_location,
      mode: 'driving',
      key: process.env.GOOGLE_API_KEY
    };

    // Si l'utilisateur souhaite √©viter les p√©ages, ajouter le param√®tre 'avoid'
    if (avoidTolls) {
      params.avoid = 'tolls';
    }

    // Appel √† l'API Google Maps pour obtenir l'itin√©raire
    const response = await client.directions({ params });
    const route = response.data.routes[0];

    // D√©codage de la polyline pour obtenir les points du trajet
    const encodedPolyline = route.overview_polyline.points;
    const decodedPoints = polyline.decode(encodedPolyline);
    const routePoints = decodedPoints.map(([lat, lng]) => ({ lat, lng }));

    // Cr√©ation de l'itin√©raire dans la base de donn√©es via Sequelize
    const itinerary = await Itinerary.create({
      user_id,
      start_location,
      end_location,
      route_points: routePoints,
      duration: route.legs[0].duration.value,   // Dur√©e en secondes
      distance: route.legs[0].distance.value,     // Distance en m√®tres
      cost: 0,                                    // Co√ªt par d√©faut
      toll_free: avoidTolls ? true : false        // En fonction du param√®tre envoy√©
    });

    return res.status(201).json({
      message: 'Itin√©raire cr√©√©',
      itinerary
    });
  } catch (error) {
    console.error("Erreur lors de la recherche d'itin√©raire :", error.message);
    return res.status(500).json({
      error: "Erreur lors de la recherche d'itin√©raire."
    });
  }
};

// üîÅ Recalculer l'itin√©raire en cas d'incidents
const recalculateItinerary = async (req, res) => {
  const { itinerary_id, incidents = [] } = req.body;

  // Validation du champ itinerary_id
  if (!itinerary_id) {
    return res.status(400).json({
      error: "Le champ 'itinerary_id' est requis."
    });
  }

  try {
    // R√©cup√©rer l'itin√©raire existant par son identifiant
    const itinerary = await Itinerary.findByPk(itinerary_id);
    if (!itinerary) {
      return res.status(404).json({ error: 'Itin√©raire non trouv√©.' });
    }

    const routePoints = itinerary.route_points; // D√©j√† un objet JSON
    let activeIncidents = incidents;
    if (activeIncidents.length === 0) {
      // Vous pouvez ici int√©grer une requ√™te sur une table incidents si n√©cessaire.
      activeIncidents = []; // Pour cet exemple, on reste vide.
    }

    // D√©terminer les incidents affectant l'itin√©raire, en comparant chaque point
    const tolerance = 0.01;
    const affectedIncidents = activeIncidents.filter(incident =>
      routePoints.some(point =>
        Math.abs(point.lat - incident.latitude) < tolerance &&
        Math.abs(point.lng - incident.longitude) < tolerance
      )
    );

    if (affectedIncidents.length === 0) {
      return res.status(200).json({
        message: 'Aucun recalcul n√©cessaire',
        itinerary
      });
    }

    // Appel √† l'API Google Maps pour recalculer l'itin√©raire en √©vitant les p√©ages
    const response = await client.directions({
      params: {
        origin: itinerary.start_location,
        destination: itinerary.end_location,
        mode: 'driving',
        avoid: 'tolls',
        key: process.env.GOOGLE_API_KEY,
      },
    });

    const newEncodedPolyline = response.data.routes[0].overview_polyline.points;
    const newDecodedPoints = polyline.decode(newEncodedPolyline);
    const newRoutePoints = newDecodedPoints.map(([lat, lng]) => ({ lat, lng }));

    return res.status(200).json({
      message: 'Itin√©raire recalcul√© en √©vitant les incidents',
      old_route: routePoints,
      new_route: {
        route_points: newRoutePoints,
        duration: response.data.routes[0].legs[0].duration.value,
        distance: response.data.routes[0].legs[0].distance.value,
      },
      affected_incidents: affectedIncidents,
    });
  } catch (error) {
    console.error("Erreur lors du recalcul de l'itin√©raire :", error.message);
    return res.status(500).json({
      error: "Erreur lors du recalcul de l'itin√©raire."
    });
  }
};

module.exports = { searchItinerary, recalculateItinerary };
